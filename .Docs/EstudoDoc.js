import plugin from '../plugin.json'; // Importa√ß√£o do arquivo JSON que cont√©m a configura√ß√£o do plugin
import LRUCache from './cache.js'; // Importa√ß√£o de uma classe LRUCache definida em cache.js

const fsOperation = acode.require('fsOperation'); // Importa√ß√£o da opera√ß√£o de sistema de arquivos do Acode

const { editor } = editorManager; // Desestrutura√ß√£o para obter acesso ao objeto editor do editorManager

class PathIntellisense {
	constructor() {
		this.directoryCache = new LRUCache(); // Inst√¢ncia de uma cache usando a classe LRUCache
	}

	async init() {
		const self = this;

		// Adiciona um comando para resetar o cache quando o atalho "Ctrl-Shift-I" for pressionado
		editor.commands.addCommand({
			name: 'pathintellisense:reset_cache',
			description: 'Reset PathIntellisense Cache',
			bindKey: { win: 'Ctrl-Shift-I' },
			exec: this.clearCache.bind(this), // Chama o m√©todo clearCache() para limpar o cache
		});

		// Define o objeto pathAutoCompletions com m√©todo getCompletions para autocompletar caminhos de arquivos
		this.pathAutoCompletions = {
			getCompletions: async function (editor, session, pos, prefix, callback) {
				// L√≥gica para obter sugest√µes de autocompletar com base no caminho atual digitado pelo usu√°rio
				// ... (c√≥digo omitido para brevidade)
			},
		};

		// Adiciona o autocompletar de caminhos como um dos primeiros completers
		editor.completers.unshift(this.pathAutoCompletions);

		// Ativa o autocompletar ap√≥s a inser√ß√£o de uma barra ("/")
		editor.commands.on('afterExec', function (e) {
			if (e.command.name === 'insertstring' && (e.args === '/' || e.args.endsWith('/'))) {
				editor.execCommand('startAutocomplete');
			}
		});
	}

	// M√©todo para limpar o cache
	clearCache() {
		this.directoryCache.resetCache();
		window.toast('Cache Cleared üî•', 2000); // Exibe uma mensagem indicando que o cache foi limpo
	}

	// Outros m√©todos da classe para buscar diret√≥rios, manipular caminhos, entre outros (explicados no c√≥digo)
}

// Cria√ß√£o de um plugin PathIntellisense e suas fun√ß√µes de inicializa√ß√£o e remo√ß√£o
if (window.acode) {
	const acodePlugin = new PathIntellisense();
	acode.setPluginInit(plugin.id, async (baseUrl, $page, { cacheFileUrl, cacheFile }) => {
		if (!baseUrl.endsWith('/')) {
			baseUrl += '/';
		}
		acodePlugin.baseUrl = baseUrl;
		await acodePlugin.init($page, cacheFile, cacheFileUrl);
	});
	acode.setPluginUnmount(plugin.id, () => {
		acodePlugin.destroy(); // Chama o m√©todo destroy() para desativar o plugin e remover funcionalidades
	});
}
